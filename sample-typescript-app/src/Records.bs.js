// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function computeArea(param) {
  return Caml_int32.imul(Caml_int32.imul(param[/* x */0], param[/* y */1]), Belt_Option.mapWithDefault(param[/* z */2], 1, (function (n) {
                    return n;
                  })));
}

function coord2d(x, y) {
  return /* record */[
          /* x */x,
          /* y */y,
          /* z */undefined
        ];
}

var getOpt = Belt_Option.mapWithDefault;

function findAddress(business) {
  return Belt_Option.mapWithDefault(business[/* address */2], /* [] */0, (function (a) {
                return /* :: */[
                        a,
                        /* [] */0
                      ];
              }));
}

function findAllAddresses(businesses) {
  return Belt_List.toArray(Belt_List.flatten(Belt_List.fromArray(Belt_Array.map(businesses, (function (business) {
                            return Pervasives.$at(Belt_Option.mapWithDefault(business[/* address */2], /* [] */0, (function (a) {
                                              return /* :: */[
                                                      a,
                                                      /* [] */0
                                                    ];
                                            })), Belt_Option.mapWithDefault(business[/* owner */1], /* [] */0, (function (p) {
                                              return Belt_Option.mapWithDefault(p[/* address */2], /* [] */0, (function (a) {
                                                            return /* :: */[
                                                                    a,
                                                                    /* [] */0
                                                                  ];
                                                          }));
                                            })));
                          })))));
}

var origin = /* record */[
  /* x */0,
  /* y */0,
  /* z */0
];

exports.origin = origin;
exports.computeArea = computeArea;
exports.coord2d = coord2d;
exports.getOpt = getOpt;
exports.findAddress = findAddress;
exports.findAllAddresses = findAllAddresses;
/* No side effect */
