/* Typescript file generated by genFlow. */

// tslint:disable-next-line:no-var-requires
const RecordsBS = require("./Records.bs");

// No need to import locally visible type business. Make sure it is also marked with @genFlow
// No need to import locally visible type coord. Make sure it is also marked with @genFlow
// No need to import locally visible type person. Make sure it is also marked with @genFlow

import {list} from '../src/shims/ReasonPervasives.shim';

// tslint:disable-next-line:interface-over-type-literal
export type coord = {x:number, y:number, z?:number};
export const origin: coord = {x:RecordsBS.origin[0], y:RecordsBS.origin[1], z:RecordsBS.origin[2]};
export const computeArea: (_1:coord) => number = function _(Arg1) { const result = RecordsBS.computeArea([Arg1.x, Arg1.y, (Arg1.z == null ? undefined : Arg1.z)]); return result };
export const coord2d: (_1:number, _2:number) => coord = function _(Arg1, Arg2) { const result = RecordsBS.coord2d(Arg1, Arg2); return {x:result[0], y:result[1], z:result[2]} };
// tslint:disable-next-line:interface-over-type-literal
export type person = {name:string, age:number, address?:string};
// tslint:disable-next-line:interface-over-type-literal
export type business = {name:string, owner?:person, address?:string};
export const findAddress: (_1:business) => list<string> = function _(Arg1) { const result = RecordsBS.findAddress([Arg1.name, (Arg1.owner == null ? undefined : [Arg1.owner.name, Arg1.owner.age, (Arg1.owner.address == null ? undefined : Arg1.owner.address)]), (Arg1.address == null ? undefined : Arg1.address)]); return result };
export const findAllAddresses: (_1:business[]) => string[] = function _(Arg1) { const result = RecordsBS.findAllAddresses(Arg1.map(function _element(x) { return [x.name, (x.owner == null ? undefined : [x.owner.name, x.owner.age, (x.owner.address == null ? undefined : x.owner.address)]), (x.address == null ? undefined : x.address)]})); return result };